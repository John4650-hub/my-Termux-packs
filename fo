cc
lass MyAudioCallback : public oboe::AudioStreamCallback {
public:
    MyAudioCallback(const std::string& filePath) : mFilePath(filePath) {
        mFile.open(mFilePath, std::ios::binary);
        if (!mFile.is_open()) {
            std::cerr << "Failed to open audio file: " << mFilePath << std::endl;
        }
    }

    oboe::DataCallbackResult onAudioReady(oboe::AudioStream *stream, void *audioData, int32_t numFrames) override {
        if (!mFile.read(static_cast<char*>(audioData), numFrames * stream->getChannelCount() * sizeof(float))) {
            return oboe::DataCallbackResult::Stop;
        }
        return oboe::DataCallbackResult::Continue;
    }

    void onErrorBeforeClose(oboe::AudioStream *stream, oboe::Result error) override {
        std::cerr << "Error before close: " << oboe::convertToText(error) << std::endl;
    }

    void onErrorAfterClose(oboe::AudioStream *stream, oboe::Result error) override {
        std::cerr << "Error after close: " << oboe::convertToText(error) << std::endl;
    }

private:
    std::string mFilePath;
    std::ifstream mFile;
}
